// t:n^2 (if flatten) s:n
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int[] roots = new int[n];
        int[] count = new int[n];
        Arrays.fill(roots, -1);
        Arrays.fill(count, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (graph[j][i] == 1) {
                    int root1 = find(j, roots);
                    int root2 = find(i, roots);
                    if (root1 != root2) {
                        roots[root2] = root1;
                        count[root1] += count[root2];
                        // count[root2] = count[root1];
                    }
                }
            }
        }
        
        Map<Integer, Integer> map = new HashMap<>();
        // <Union, #(Malware in union)>
        Arrays.sort(initial);
        for (int node : initial) {
            int root = find(node, roots);
            map.put(root, map.getOrDefault(root, 0) + 1);
        }
        int max = 0;
        int res = initial[0];
        for (int node : initial) {
            int root = find(node, roots);
            if (map.get(root) == 1 && count[root] > max) {
                max = count[root];
                res = node;
            }
        }
        return res;
    }
    
    private int find(int node, int[] roots) {
        while (roots[node] != -1) {
            node = roots[node];
        }
        return node;
    }
}